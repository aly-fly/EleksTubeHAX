name: Build & publish combined EleksTubeHAX firmware binaries.

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Kill older runs for the same ref to save minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  discover-envs:
    name: Discover PlatformIO environments.
    runs-on: ubuntu-latest
    outputs:
      envs: ${{ steps.find.outputs.envs }}
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Find [env:*] sections in platformio.ini file.
        id: find
        shell: bash
        run: |
          envs_json="$(
            awk '
              /^\[env:[^]]+\]/ {
                match($0, /^\[env:([^]]+)\]/, m)
                if (m[1] != "") envs[count++] = m[1]
              }
              END {
                printf("[")
                for (i=0; i<count; i++) printf("%s\"%s\"", (i>0?",":""), envs[i])
                printf("]")
              }
            ' platformio.ini
          )"
          echo "envs=${envs_json}" >> "$GITHUB_OUTPUT"
          echo "  üêû Detected PIO environments: ${envs_json}."

  build:
    name: Build ${{ matrix.env }} on ubuntu-latest.
    runs-on: ubuntu-latest
    needs: discover-envs

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        env: ${{ fromJson(needs.discover-envs.outputs.envs) }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Setup Python.
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install PlatformIO + IntelHex and esptool libraries.
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio intelhex esptool

      - name: Ensure default _USER_DEFINES.h file exists.
        shell: bash
        run: |
          set -euo pipefail
          SRC="include/_USER_DEFINES - empty.h"
          DST="include/_USER_DEFINES.h"
          mkdir -p "$(dirname "$DST")"
          if [[ ! -f "$DST" ]]; then
            if [[ ! -f "$SRC" ]]; then
              echo "  ‚ùå Source file not found: '$SRC'."
              exit 1
            fi
            cp "$SRC" "$DST"
            echo "  üîß Copied: '$SRC' -> '$DST'."
          else
            echo "  ‚ö†Ô∏è Already present: '$DST'."
          fi

      - name: Build ${{ matrix.env }} environment.
        env:
          PLATFORMIO_BUILD_FLAGS: "-D CREATE_FIRMWAREFILE"
        run: pio run --environment "${{ matrix.env }}"

      - name: Stage combined firmware binaries (flat).
        shell: bash
        run: |
          mkdir -p _artifact
          BUILD_DIR=".pio/build/${{ matrix.env }}"
          if [ -d "$BUILD_DIR" ]; then
            # Copy and also fail if no FW_*.bin exists.
            files=$(find "$BUILD_DIR" -maxdepth 1 -type f -name 'FW_*.bin')
            if [ -z "$files" ]; then
              echo "  ‚õî No FW_*.bin produced for environment '${{ matrix.env }}'."
              exit 1
            fi
            echo "$files" | while read -r f; do
              echo "  üêû Found '$f'."
              cp "$f" _artifact/
            done
          else
            echo "  ‚õî Build directory $BUILD_DIR does not exist for environment '${{ matrix.env }}'."
            exit 1
          fi

      - name: Upload partial artifact for ${{ matrix.env }}.
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fw-${{ matrix.env }} # Unique per environment
          path: _artifact/*.bin
          if-no-files-found: error

  bundle:
    name: Bundle firmware (single upload).
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download all combined firmware artifacts (merged dir).
        uses: actions/download-artifact@v4
        with:
          pattern: fw-* # Grab every per-env artifact
          merge-multiple: true # Flatten into one directory
          path: merged_fw # Local dir with all .bin files

      - name: Show what we merged.
        run: ls -al merged_fw

      - name: Upload combined firmware bundle (once).
        uses: actions/upload-artifact@v4
        with:
          name: all-firmware # Single final artifact
          path: merged_fw/**
          if-no-files-found: error
