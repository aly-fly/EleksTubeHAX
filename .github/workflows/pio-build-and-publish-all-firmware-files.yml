name: Build & publish combined EleksTubeHAX firmware binaries.

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  actions: write # Required to list/delete caches during pruning

env:
  PIO_DIR: EleksTubeHAX_pio # Set project base dir once here
  GH_TOKEN: ${{ github.token }}
  GITHUB_TOKEN: ${{ github.token }}
  CI: true
  GH_PROMPT_DISABLED: "1"
  GH_PAGER: cat
  GH_NO_UPDATE_NOTIFIER: "1"

jobs:
  discover-envs:
    runs-on: ubuntu-latest
    outputs:
      envs: ${{ steps.find.outputs.envs }}
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Find [env:*] sections in platformio.ini file.
        id: find
        shell: bash
        working-directory: ${{ env.PIO_DIR }}
        run: |
          envs_json="$(
            awk '
              /^\[env:[^]]+\]/ {
                match($0, /^\[env:([^]]+)\]/, m)
                if (m[1] != "") envs[count++] = m[1]
              }
              END {
                printf("[")
                for (i=0; i<count; i++) printf("%s\"%s\"", (i>0?",":""), envs[i])
                printf("]")
              }
            ' platformio.ini
          )"
          echo "envs=${envs_json}" >> "$GITHUB_OUTPUT"
          echo "  üêû Detected PIO environments: ${envs_json}."

  build:
    runs-on: ubuntu-latest
    needs: discover-envs
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        env: ${{ fromJson(needs.discover-envs.outputs.envs) }}

    defaults:
      run:
        working-directory: ${{ env.PIO_DIR }}

    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      # --- Cache pruning (keep only latest N ~/.platformio caches). ---------
      - name: Install GitHub CLI & jq.
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      - name: Prune old PlatformIO caches (gh api; non-interactive, guarded).
        # Only run on branches in this repo (not PRs from forks with read-only token).
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        env:
          KEY_PREFIX: ${{ runner.os }}-platformio-
          KEEP: "3" # Adjust as needed
        shell: bash
        run: |
          set -euo pipefail

          # If no token is available (e.g., running under `act` without providing one), skip pruning to avoid gh prompts.
          if [ -z "${GH_TOKEN:-${GITHUB_TOKEN:-}}" ]; then
            echo "  ‚ö†Ô∏è GH_TOKEN/GITHUB_TOKEN not set ‚Äî skipping cache prune to avoid prompts."
            exit 0
          fi

          repo="${{ github.repository }}"
          echo "  üîß Pruning caches with prefix: ${KEY_PREFIX} (keeping latest ${KEEP})."

          # List all cache pages, filter by prefix, sort by last access desc, drop the newest KEEP, delete the rest.
          gh api --paginate -H "Accept: application/vnd.github+json" \
            "/repos/${repo}/actions/caches?per_page=100" \
          | jq -r --arg p "$KEY_PREFIX" --argjson k "$KEEP" '
              .actions_caches? // empty
              | map(select(.key | startswith($p)))
              | sort_by(.last_accessed_at) | reverse
              | .[$k:] | .[].id
            ' \
          | while read -r id; do
              [ -z "$id" ] && continue
              echo "  üîß Deleting cache id '$id'."
              gh api --method DELETE "/repos/${repo}/actions/caches/$id" || true
            done
      # ----------------------------------------------------------------------

      - name: Cache PlatformIO core (platforms/frameworks).
        uses: actions/cache@v4
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-platformio-${{ hashFiles('${{ env.PIO_DIR }}/platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-platformio-

      - name: Setup Python.
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install PlatformIO + IntelHex and esptool libraries.
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio intelhex esptool

      - name: Ensure default _USER_DEFINES.h file exists.
        shell: bash
        working-directory: ${{ env.PIO_DIR }}
        run: |
          set -euo pipefail
          SRC="include/_USER_DEFINES - empty.h"
          DST="include/_USER_DEFINES.h"
          mkdir -p "$(dirname "$DST")"
          if [[ ! -f "$DST" ]]; then
            if [[ ! -f "$SRC" ]]; then
              echo "  ‚ùå Source file not found: '$SRC'."
              exit 1
            fi
            cp "$SRC" "$DST"
            echo "  üîß Copied: '$SRC' -> '$DST'."
          else
            echo "  ‚ö†Ô∏è Already present: '$DST'."
          fi

      - name: Force CREATE_FIRMWAREFILE define in platformio.ini file.
        run: |
          if grep -qE '^\s*;\s*-D\s*CREATE_FIRMWAREFILE' platformio.ini; then
            sed -i 's/^\s*;\s*-D\s*CREATE_FIRMWAREFILE/	-D CREATE_FIRMWAREFILE/' platformio.ini
          fi
          if ! grep -qE '^\s*-D\s*CREATE_FIRMWAREFILE' platformio.ini; then
            awk '
              BEGIN{added=0}
              {print}
              /^\s*build_flags\s*=\s*$/ {print "  -D CREATE_FIRMWAREFILE"; added=1}
              END{ if (!added) print "\nbuild_flags =\n  -D CREATE_FIRMWAREFILE" }
            ' platformio.ini > platformio.ini.new && mv platformio.ini.new platformio.ini
          fi
          echo "  üîß CREATE_FIRMWAREFILE set."

      - name: Build ${{ matrix.env }} environment.
        run: pio run --environment "${{ matrix.env }}"

      - name: Stage combined firmware binaries (flat).
        shell: bash
        run: |
          mkdir -p _artifact
          BUILD_DIR=".pio/build/${{ matrix.env }}"
          if [ -d "$BUILD_DIR" ]; then
            # Copy and also fail if no FW_*.bin exists.
            files=$(find "$BUILD_DIR" -maxdepth 1 -type f -name 'FW_*.bin')
            if [ -z "$files" ]; then
              echo "  ‚õî No FW_*.bin produced for environment '${{ matrix.env }}'."
              exit 1
            fi
            echo "$files" | while read -r f; do
              echo "  üêû Found '$f'."
              cp "$f" _artifact/
            done
          else
            echo "  ‚õî Build directory $BUILD_DIR does not exist for environment '${{ matrix.env }}'."
            exit 1
          fi

      - name: Upload partial artifact for ${{ matrix.env }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fw-${{ matrix.env }} # Unique per environment
          path: ${{ env.PIO_DIR }}/_artifact/*.bin
          if-no-files-found: error

  bundle:
    name: Bundle firmware (single upload)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download all combined firmware artifacts (merged dir).
        uses: actions/download-artifact@v4
        with:
          pattern: fw-* # Grab every per-env artifact
          merge-multiple: true # Flatten into one directory
          path: merged_fw # Local dir with all .bin files

      - name: Show what we merged
        run: ls -al merged_fw

      - name: Upload combined firmware bundle (once)
        uses: actions/upload-artifact@v4
        with:
          name: all-firmware # Single final artifact
          path: merged_fw/**
          if-no-files-found: error
