name: Create each PlatformIO EleksTubeHAX environment build on multiple OSes.

on:
  push:
    branches: ["*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  actions: write # Required to list/delete caches during pruning

env:
  GH_TOKEN: ${{ github.token }}
  GITHUB_TOKEN: ${{ github.token }}
  CI: true
  GH_PROMPT_DISABLED: "1"
  GH_PAGER: cat
  GH_NO_UPDATE_NOTIFIER: "1"

jobs:
  discover-envs:
    name: Discover PlatformIO environments.
    runs-on: ubuntu-latest
    outputs:
      envs: ${{ steps.find.outputs.envs }}
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Find [env:*] sections in platformio.ini file.
        id: find
        shell: bash
        run: |
          envs_json="$(
            awk '
              /^\[env:[^]]+\]/ {
                match($0, /^\[env:([^]]+)\]/, m)
                if (m[1] != "") envs[count++] = m[1]
              }
              END {
                printf("[")
                for (i=0; i<count; i++) printf("%s\"%s\"", (i>0?",":""), envs[i])
                printf("]")
              }
            ' platformio.ini
          )"
          echo "envs=${envs_json}" >> "$GITHUB_OUTPUT"
          echo "  üêû Detected PIO environments: ${envs_json}."

  build:
    name: Build ${{ matrix.env }} on ${{ matrix.os }}.
    runs-on: ${{ matrix.os }}

    needs: discover-envs

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 2 configurations:
      # 1. <Windows, Release, toolchain on the default runner image, default generator>
      # 2. <Linux, Release, toolchain on the default runner image, default generator>

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:        
        # os: [ubuntu-latest] # For local testing: act can‚Äôt run runs-on: windows-latest (or macos-latest)
        os: [ubuntu-latest, windows-latest]
        env: ${{ fromJson(needs.discover-envs.outputs.envs) }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Setup Python.
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install PlatformIO + IntelHex and esptool libraries.
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio intelhex esptool

      - name: Ensure default _USER_DEFINES.h file exists.
        shell: bash
        run: |
          set -euo pipefail
          SRC="include/_USER_DEFINES - empty.h"
          DST="include/_USER_DEFINES.h"
          mkdir -p "$(dirname "$DST")"
          if [[ ! -f "$DST" ]]; then
            if [[ ! -f "$SRC" ]]; then
              echo "  ‚ùå Source file not found: '$SRC'."
              exit 1
            fi
            cp "$SRC" "$DST"
            echo "  üîß Copied: '$SRC' -> '$DST'."
          else
            echo "  ‚ö†Ô∏è Already present: '$DST'."
          fi

      - name: Build ${{ matrix.env }} environment.
        run: pio run --environment "${{ matrix.env }}"
