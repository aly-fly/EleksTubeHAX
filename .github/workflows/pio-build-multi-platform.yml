name: Create each PlatformIO EleksTubeHAX environment build on multiple OSes.

on:
  push:
    branches: ["*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  actions: write # Required to list/delete caches during pruning

env:
  PIO_DIR: EleksTubeHAX_pio # Set project base dir once here
  GH_TOKEN: ${{ github.token }}
  GITHUB_TOKEN: ${{ github.token }}
  CI: true
  GH_PROMPT_DISABLED: "1"
  GH_PAGER: cat
  GH_NO_UPDATE_NOTIFIER: "1"

jobs:
  discover-envs:
    runs-on: ubuntu-latest
    outputs:
      envs: ${{ steps.find.outputs.envs }}
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Find [env:*] sections in platformio.ini file.
        id: find
        shell: bash
        working-directory: ${{ env.PIO_DIR }}
        run: |
          envs_json="$(
            awk '
              /^\[env:[^]]+\]/ {
                match($0, /^\[env:([^]]+)\]/, m)
                if (m[1] != "") envs[count++] = m[1]
              }
              END {
                printf("[")
                for (i=0; i<count; i++) printf("%s\"%s\"", (i>0?",":""), envs[i])
                printf("]")
              }
            ' platformio.ini
          )"
          echo "envs=${envs_json}" >> "$GITHUB_OUTPUT"
          echo "  üêû Detected PIO environments: ${envs_json}."

  build:
    name: Build on ${{ matrix.os }}, env=${{ matrix.env }}.
    runs-on: ${{ matrix.os }}

    needs: discover-envs

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 2 configurations:
      # 1. <Windows, Release, toolchain on the default runner image, default generator>
      # 2. <Linux, Release, toolchain on the default runner image, default generator>

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:        
        # os: [ubuntu-latest] # For local testing: act can‚Äôt run runs-on: windows-latest (or macos-latest)
        os: [ubuntu-latest, windows-latest]
        env: ${{ fromJson(needs.discover-envs.outputs.envs) }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.PIO_DIR }}

    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      # --- Tooling installs (gh + jq) ---------------------------------------
      - name: Install GitHub CLI & jq (Linux).
        if: runner.os == 'Linux'
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq
          if ! command -v gh >/dev/null 2>&1; then
            # Install GitHub CLI via official apt repo if not already on image.
            type -p curl >/dev/null || sudo apt-get install -y curl
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
              | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" \
              | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y gh
          fi

      - name: Install GitHub CLI & jq (Windows).
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install gh jq -y --no-progress

      - name: Install GitHub CLI & jq (macOS).
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install gh jq || true
      # ----------------------------------------------------------------------

      - name: Cache PlatformIO core (platforms/frameworks).
        uses: actions/cache@v4
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-platformio-${{ hashFiles(format('{0}/platformio.ini', env.PIO_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-platformio-

      - name: Setup Python.
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install PlatformIO + IntelHex and esptool libraries.
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio intelhex esptool

      - name: Ensure default _USER_DEFINES.h file exists.
        shell: bash
        working-directory: ${{ env.PIO_DIR }}
        run: |
          set -euo pipefail
          SRC="include/_USER_DEFINES - empty.h"
          DST="include/_USER_DEFINES.h"
          mkdir -p "$(dirname "$DST")"
          if [[ ! -f "$DST" ]]; then
            if [[ ! -f "$SRC" ]]; then
              echo "  ‚ùå Source file not found: '$SRC'."
              exit 1
            fi
            cp "$SRC" "$DST"
            echo "  üîß Copied: '$SRC' -> '$DST'."
          else
            echo "  ‚ö†Ô∏è Already present: '$DST'."
          fi

      - name: Build ${{ matrix.env }} environment.
        run: pio run --environment "${{ matrix.env }}"

  prune-caches:
      name: Prune old PlatformIO caches
      runs-on: ubuntu-latest
      needs: build
      if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
      steps:
        - name: Install GitHub CLI & jq (Linux).
          run: |
            set -euo pipefail
            sudo apt-get update
            sudo apt-get install -y jq
            if ! command -v gh >/dev/null 2>&1; then
              type -p curl >/dev/null || sudo apt-get install -y curl
              curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
              sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y gh
            fi
        - name: Prune caches for PlatformIO (Linux + Windows prefixes, keep newest N).
          env:
            KEEP: "3" # Adjust as needed
          run: |
            set -euo pipefail
            if [ -z "${GH_TOKEN:-${GITHUB_TOKEN:-}}" ]; then
              echo "  ‚ö†Ô∏è GH_TOKEN/GITHUB_TOKEN not set ‚Äî skipping cache prune to avoid prompts."
              exit 0
            fi
            repo="${{ github.repository }}"
            for KEY_PREFIX in Linux-platformio- Windows-platformio-; do
              echo "  üîß Pruning caches with prefix: $KEY_PREFIX (keeping $KEEP)."
            gh api --paginate -H "Accept: application/vnd.github+json" \
              "/repos/${repo}/actions/caches?per_page=100" \
            | jq -r --arg p "$KEY_PREFIX" --argjson k "$KEEP" '
                  .actions_caches? // empty
                  | map(select(.key | startswith($p)))
                  | sort_by(.last_accessed_at) | reverse
                  | .[$k:] | .[].id
                '             | while read -r id; do
                  [ -z "$id" ] && continue
                  echo "  üîß Deleting cache id '$id' for prefix $KEY_PREFIX."
                  gh api --method DELETE "/repos/${repo}/actions/caches/$id" || true
                done
            done
